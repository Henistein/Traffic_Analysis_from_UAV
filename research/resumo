R-CNN (deve conter)

- improve the quality of candidate bounding boxes and to take a deep architecture to extract high-level features

- RCNN is divided in three stages:
  - Region proposal generation:
    - use selective search to generate about 2K region proposals for each image (adicionar mais alguma coisita)

  - CNN as a feature extraction
    - each region proposal is cropped into a fixed resolution
    - CNN module extracts a 4096 dimensional feature
    - Due CNN power a robust feature representation for each region proposal can be obtained
  - Classification and localization
    - SVMs (falar um pouco do uso destes na RCNN)
    - The scored regions are then adjusted with bounding box regression and filteres with a non max supression.

  -RCNNs uses pretrained on ILSVRC

  --- DRAWBACKS ---
  - Due to the existence of FC layers, the CNN requires a fixed size input image, which leads to the re-computaion of the whole CNN for each evaluated region, bad in testing period
  - The training of R-CNN is a multi-stage pipeline. 
      1 - A convolutional network (ConvNet) on object proposals is fine-tuned.
      2 - The softmax classifier learned by fine-tuning is replaced by SVMs to fit with ConvNet features.
      3 - Bounding-box regressors are trained
   - While training features are extracted from different region proposals and stored on the disk, so it can require too much storage memory. It will take a long time to process a relatively small training set with very deep networks, such as VGG16.
   - The obtained region proposals generated by selective search are redundant and this procedure is time-consuming (around 2 seconds to extract 2k region proposals).
    
- Fast R-CNN
  1 - The whole image is processed with conv layers to produce feature maps.
  2 - A fixed-length feature vector is extracted from each region proposal with a region of interest (RoI) pooling layer.
  3 - Each feature vector is fed into a sequence of FC layers before finally branching into two sibling output layers.
  4 - There is two output layers, one is responsible for producing softmax probabilities for all C+1 categories (C object classes plus one 'background' class), the other output layer encodes refined bounding-box positions with four real-valued numbers. Except the generation of region proposals, all of these parameters are optimized via multi-task loss in a end-to-end way. (inserir imagens da formula do erro e explicar o procedimento).
